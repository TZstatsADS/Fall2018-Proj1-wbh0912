sliderInput(inputId = "topBarchart",
label = "Number of terms for bar chart:",
min = 1,
max = 25,
value = 10),
br(),
br(),
checkboxInput(inputId = "topFreqN",
label = "Plot Network Graph",
value = F),
sliderInput(inputId = "topNetwork",
label = "Number of edges for network graph:",
min = 1,
max = 150,
value = 50)
),
mainPanel(
wordcloud2Output(outputId = "WC"),
plotOutput(outputId = "figure")
)
)
),
tabPanel("Individual Terms",
titlePanel(h1("Comparison of Proportions",
align = "center")),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "attribute",
label = "Select the attribute:",
choices = c("Gender" = "gender",
"Marital Status" = "marital",
"Parenthood" = "parenthood",
"Reflection Period" = "reflection_period")
)
),
mainPanel(
plotOutput(outputId = "scatter")
)
)
),
tabPanel("Pair of Words",
titlePanel(h1("Most Frequent Bigrams",
align = "center")),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "factor",
label = "Select the attribute:",
choices = c("Gender" = "gender",
"Marital Status" = "marital",
"Parenthood" = "parenthood",
"Reflection Period" = "reflection_period")
),
numericInput(inputId = "topBigrams",
label = "Number of top pairs to view:",
min = 1,
max = 25,
value = 10)
),
mainPanel(
plotOutput(outputId = "bar")
)
)
),
tabPanel("Data",
DT::dataTableOutput("table")
)
)
server <- function(input, output, session) {
pt1 <- reactive({
if(!input$topFreqB) return(NULL)
word_count %>%
slice(1:input$topBarchart) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
ylab("Word Frequency")+
coord_flip()
})
pt2 <- reactive({
if(!input$topFreqN) return(NULL)
bigram_graph <- bigram_counts %>%
slice(1:input$topNetwork) %>%
graph_from_data_frame()
set.seed(123)
x <- grid::arrow(type = "closed", length = unit(.1, "inches"))
ggraph(bigram_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = x, end_cap = circle(.05, 'inches')) +
geom_node_point(color = "skyblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
})
output$WC <- renderWordcloud2({
word_count %>%
slice(1:input$topWordcloud) %>%
wordcloud2(size = 0.6,
rotateRatio = 0)
})
output$figure <- renderPlot(height = 500, width = 500, {
ptlist <- list(pt1(),pt2())
ptlist <- ptlist[!sapply(ptlist, is.null)]
if(length(ptlist)==0) return(NULL)
lay <- rbind(c(1,1),
c(2,2))
grid.arrange(grobs = ptlist, layout_matrix = lay)
})
selectedAttribute <- reactive({
list(atr = input$attribute)
})
output$scatter <- renderPlot({
temp <- bag_of_words %>%
count(!!as.name(selectedAttribute()$atr), word) %>%
group_by(!!as.name(selectedAttribute()$atr)) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(!!as.name(selectedAttribute()$atr), proportion)
ggplot(temp,
aes_string(x = colnames(temp)[2], y = colnames(temp)[3]),
color = abs(colnames(temp)[3] - colnames(temp)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
})
selectedBigram <- reactive({
list(var = input$factor)
})
output$bar <- renderPlot({
hm_bigrams %>%
count(!!as.name(selectedBigram()$var), bigram, sort = TRUE) %>%
group_by(!!as.name(selectedBigram()$var)) %>%
top_n(input$topBigrams) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(bigram, n, fill = !!as.name(selectedBigram()$var))) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", selectedBigram()$var)), ncol = 2, scales = "free") +
coord_flip()
})
output$table <- DT::renderDataTable({
DT::datatable(hm_data)
})
}
shinyApp(ui, server)
library(ggraph)
remove.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
shinyApp(ui, server)
library(tidyverse)
library(tidytext)
library(DT)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile)
hm_data <- hm_data %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
text) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
datatable(hm_data)
bag_of_words <-  hm_data %>%
unnest_tokens(word, text)
word_count <- bag_of_words %>%
count(word, sort = TRUE)
hm_bigrams <- hm_data %>%
filter(count != 1) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigram_counts <- hm_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
ui <- navbarPage("What makes people happy?",
tabPanel("Overview",
titlePanel(h1("Most Frequent Occurrences",
align = "center")),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "topWordcloud",
label = "Number of terms for word cloud:",
min = 5,
max = 100,
value = 50),
br(),
br(),
checkboxInput(inputId = "topFreqB",
label = "Plot Bar Chart",
value = F),
sliderInput(inputId = "topBarchart",
label = "Number of terms for bar chart:",
min = 1,
max = 25,
value = 10),
br(),
br(),
checkboxInput(inputId = "topFreqN",
label = "Plot Network Graph",
value = F),
sliderInput(inputId = "topNetwork",
label = "Number of edges for network graph:",
min = 1,
max = 150,
value = 50)
),
mainPanel(
wordcloud2Output(outputId = "WC"),
plotOutput(outputId = "figure")
)
)
),
tabPanel("Individual Terms",
titlePanel(h1("Comparison of Proportions",
align = "center")),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "attribute",
label = "Select the attribute:",
choices = c("Gender" = "gender",
"Marital Status" = "marital",
"Parenthood" = "parenthood",
"Reflection Period" = "reflection_period")
)
),
mainPanel(
plotOutput(outputId = "scatter")
)
)
),
tabPanel("Pair of Words",
titlePanel(h1("Most Frequent Bigrams",
align = "center")),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "factor",
label = "Select the attribute:",
choices = c("Gender" = "gender",
"Marital Status" = "marital",
"Parenthood" = "parenthood",
"Reflection Period" = "reflection_period")
),
numericInput(inputId = "topBigrams",
label = "Number of top pairs to view:",
min = 1,
max = 25,
value = 10)
),
mainPanel(
plotOutput(outputId = "bar")
)
)
),
tabPanel("Data",
DT::dataTableOutput("table")
)
)
server <- function(input, output, session) {
pt1 <- reactive({
if(!input$topFreqB) return(NULL)
word_count %>%
slice(1:input$topBarchart) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
ylab("Word Frequency")+
coord_flip()
})
pt2 <- reactive({
if(!input$topFreqN) return(NULL)
bigram_graph <- bigram_counts %>%
slice(1:input$topNetwork) %>%
graph_from_data_frame()
set.seed(123)
x <- grid::arrow(type = "closed", length = unit(.1, "inches"))
ggraph(bigram_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = x, end_cap = circle(.05, 'inches')) +
geom_node_point(color = "skyblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
})
output$WC <- renderWordcloud2({
word_count %>%
slice(1:input$topWordcloud) %>%
wordcloud2(size = 0.6,
rotateRatio = 0)
})
output$figure <- renderPlot(height = 500, width = 500, {
ptlist <- list(pt1(),pt2())
ptlist <- ptlist[!sapply(ptlist, is.null)]
if(length(ptlist)==0) return(NULL)
lay <- rbind(c(1,1),
c(2,2))
grid.arrange(grobs = ptlist, layout_matrix = lay)
})
selectedAttribute <- reactive({
list(atr = input$attribute)
})
output$scatter <- renderPlot({
temp <- bag_of_words %>%
count(!!as.name(selectedAttribute()$atr), word) %>%
group_by(!!as.name(selectedAttribute()$atr)) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(!!as.name(selectedAttribute()$atr), proportion)
ggplot(temp,
aes_string(x = colnames(temp)[2], y = colnames(temp)[3]),
color = abs(colnames(temp)[3] - colnames(temp)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
})
selectedBigram <- reactive({
list(var = input$factor)
})
output$bar <- renderPlot({
hm_bigrams %>%
count(!!as.name(selectedBigram()$var), bigram, sort = TRUE) %>%
group_by(!!as.name(selectedBigram()$var)) %>%
top_n(input$topBigrams) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(bigram, n, fill = !!as.name(selectedBigram()$var))) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", selectedBigram()$var)), ncol = 2, scales = "free") +
coord_flip()
})
output$table <- DT::renderDataTable({
DT::datatable(hm_data)
})
}
shinyApp(ui, server)
library(igraph)
shinyApp(ui, server)
library(ggraph)
shinyApp(ui, server)
# Step 0-1: Load all required packages
library(tidyverse)
library(tidytext)
library(ngram)
library(ggplot2)
library(tokenizers)
# Step 0-2: Load and clean the processed dataset
processed_moments <- read.csv("~/Documents/CU/5243 ADS/Project 1/Fall2018-Proj1-wbh0912/output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read.csv(urlfile)
processed_moments <- processed_moments %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
cleaned_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
predicted_category,
text) %>%
mutate(text = as.vector(text)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(original_hm = as.vector(original_hm)) %>%
mutate(cleaned_hm = as.vector(cleaned_hm)) %>%
mutate(age = as.vector(age))
# Barplot between momentary and sustained
ggplot(data = processed_moments, aes(x = reflection_period)) +
geom_bar(width = 0.5) +
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.3)
# Create label name
gl <- c(f = "Female", m = "Male")
ggplot(data = processed_moments, aes(x = reflection_period, fill = reflection_period)) +
geom_bar(stat = "count", width = 1) +
coord_polar(start = 0) +
facet_grid(facets = . ~ gender, labeller = labeller(gender = gl)) +
scale_fill_discrete(name = "Reflection Period",
breaks = c("24h", "3m"),
labels = c("24 hours", "3 months")) +
theme_minimal() +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
labs(title = "Momentary and Susbtained Happiness in Different Gender Group")
par(mfrow = c(1, 3))
pie(table(processed_moments$reflection_period[processed_moments$parenthood == "y"]), col = c("cadetblue2", "cyan4"), xlab = "Being a parent", labels = "")
pie(table(processed_moments$reflection_period[processed_moments$parenthood == "n"]), col = c("cadetblue2", "cyan4"), xlab = "Not being a parent", labels = "")
plot.new()
legend("right", legend = c("24 hours", "3 months"), fill = c("cadetblue2", "cyan4"), title = "Reflection Period")
# Create age tags
processed_moments$age_group[processed_moments$age >= 65 & processed_moments$age != "prefer not to say"] <- "65+"
processed_moments$age_group[processed_moments$age < 65 & processed_moments$age >= 45] <- "45-64"
processed_moments$age_group[processed_moments$age < 45 & processed_moments$age >= 25] <- "25-44"
processed_moments$age_group[processed_moments$age < 25 & processed_moments$age != ""] <- "25-"
ggplot(data = processed_moments[-which(is.na(processed_moments$age_group)), ], aes(age_group)) +
geom_bar(aes(fill = reflection_period)) +
coord_flip() +
scale_fill_brewer(palette = "Set2",
name = "Reflection Period",
breaks = c("24h", "3m"),
labels = c("24 hours", "3 months")) +
xlab("Age groups")
# Create variable "Sentence Length" for the dataset
processed_moments$SL <- unlist(lapply(processed_moments$cleaned_hm, wordcount))
# Create seperate datasets for momentary and sustained happiness
mh <- processed_moments[processed_moments$reflection_period == "24h", ]
sh <- processed_moments[processed_moments$reflection_period == "3m", ]
rl <- c("24h" = "24 hours", "3m" = "3 months")
qplot(SL, data = processed_moments, geom = "histogram", xlim = c(0, 30), binwidth = 1, xlab = "Statement Length")+
facet_wrap(~reflection_period, labeller = labeller(reflection_period = rl))
ggplot(data = processed_moments, aes(predicted_category)) +
geom_bar(aes(fill = reflection_period)) +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Momentary and Sustained Happiness in Different Categories") +
scale_fill_brewer(palette = "Set1",
name = "Reflection Period",
breaks = c("24h", "3m"),
labels = c("24 hours", "3 months")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(data = processed_moments[processed_moments$predicted_category == "exercise"| processed_moments$predicted_category == "nature"| processed_moments$predicted_category == "leisure", ], aes(predicted_category)) +
geom_bar(aes(fill = reflection_period)) +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_brewer(palette = "Set1",
name = "Reflection Period",
breaks = c("24h", "3m"),
labels = c("24 hours", "3 months")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
# single word
bowm <- mh %>%
unnest_tokens(word, text)
wcm <- count(bowm, word, sort = T)
wcm$word <- factor(wcm$word, levels = wcm$word[order(wcm$n)])
m15 <- ggplot(data = wcm[1:15, ], aes(x = word, y = n)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Momentary") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
bows <- unnest_tokens(sh, word, text)
wcs <- count(bows, word, sort = T)
wcs$word <- factor(wcs$word, levels = wcs$word[order(wcs$n)])
s15 <- ggplot(data = wcs[1:15, ], aes(x = word, y = n)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Sustained") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
grid.arrange(m15, s15, nrow=1)
# Step 0-1: Load all required packages
library(tidyverse)
library(tidytext)
library(ngram)
library(ggplot2)
library(tokenizers)
# Step 0-2: Load and clean the processed dataset
processed_moments <- read.csv("~/Documents/CU/5243 ADS/Project 1/Fall2018-Proj1-wbh0912/output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read.csv(urlfile)
processed_moments <- processed_moments %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
cleaned_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
predicted_category,
text) %>%
mutate(text = as.vector(text)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(original_hm = as.vector(original_hm)) %>%
mutate(cleaned_hm = as.vector(cleaned_hm)) %>%
mutate(age = as.vector(age))
